id: sounds
name: Sounds
subtitle: Playing and Generating Sound Effects
ordering:
    - Sounds
functions:
#---------------------------------
# sound
#--------------------------------- 
- category: function
  description: >
    Calling this function immediately plays either a randomly generated
    sound with a type specified by `name` or using the given parameters.
    
    
    `sound()`
    uses sfxr to randomly generate sounds of a given type. The `name` parameter
    is a string specifying the type of sound (see related items), and the `seed`
    parameter allows you to choose a particular random sound. Sounds with the same
    name and seed always sound the same. If no `seed` is specified the resulting
    sound will be a random sound of the specified type. If a `parameterTable` is
    passed in, those values are used to generate the sound.
  examples:
  - example: |
      -- play a random jump sound
      sound( SOUND_JUMP )
  - example: |
      -- play a specific jump sound
      sound( SOUND_JUMP, 1234 )
  - example: |
      -- using the table to define properties
      sound( { Waveform = SOUND_NOISE,
               AttackTime = 1.2,
               SustainTime = 1 } )
  group: Sounds
  id: sound
  name: sound( name, seed )
  parameters:
  - description: >
      string, the type of sound to play
      

      can be `SOUND_BLIT`, `SOUND_EXPLODE`, `SOUND_HIT`, `SOUND_JUMP`, `SOUND_PICKUP`, `SOUND_POWERUP`, `SOUND_RANDOM` or `SOUND_SHOOT`. 
      
      
      Can also be `DATA`
      followed by a base64 string encoding the parameters which is generated by
      Codea based on the sound picker panel properties and should not be edited
    name: name
    
  - description: int, specifies the random seed to use when generating a sound of
      this type
    name: seed
    
  - description: soundbuffer, specifies the raw sound data to play
    name: buffer
    
  - description: >  
      table, specifies the parameters to use when generating a sound.
      This is an advanced option, the parameters will change the noise in subtle
      ways. Play with the Sounds Plus example app to see what these parameters do.
      Any missing keys will cause the sound to use a default value for that parameter
      

      The table can contain the following (case sensitive) keys:

          Waveform - The synthesizer waveform to use, can be SOUND_NOISE, SOUND_SAWTOOTH, SOUND_SINEWAVE, or SOUND_SQUAREWAVE
      
          AttackTime - number
      
          SustainTime - number
      
          SustainPunch - number
      
          DecayTime - number
      
          StartFrequency - number
      
          MinimumFrequency - number
      
          Slide - number
      
          DeltaSlide - number
      
          VibratoDepth - number
      
          VibratoSpeed - number
      
          ChangeAmount - number
      
          ChangeSpeed - number
      
          SquareDuty - number
      
          DutySweep - number
      
          RepeatSpeed - number
      
          PhaserSweep - number
      
          LowPassFilterCutoff - number
      
          LowPassFilterCutoffSweep - number
      
          LowPassFilterResonance - number
      
          HighPassFilterCutoff - number
      
          HighPassFilterCutoffSweep - number
      
          Volume - number
    name: parameterTable
    
  related:
  - SOUND_BLIT
  - SOUND_EXPLODE
  - SOUND_HIT
  - SOUND_JUMP
  - SOUND_PICKUP
  - SOUND_POWERUP
  - SOUND_RANDOM
  - SOUND_SHOOT
  - SOUND_NOISE
  - soundbuffer
  - SOUND_SQUAREWAVE
  - SOUND_SINEWAVE
  - SOUND_SAWTOOTH
  
  syntax: |
    sound( name )
    sound( name, seed )
    sound( parameterTable )
    sound( buffer )
#---------------------------------
      
#---------------------------------
# soundbuffer
#---------------------------------       
- category: type
  description: This object represents a sound buffer containing arbitrary audio
    data. You may create `soundbuffer` objects using `soundbuffer( data,
    format, freq )` where the data is uncompressed PCM audio and the format is
    one of `FORMAT_MONO8`, `FORMAT_MONO16`, `FORMAT_STEREO8`, or `FORMAT_STEREO16`.
    
  examples:
  - example: |
      -- Creating a sound buffer object
      function setup()
          tap = false
          parameter.integer("freq",1,4000,800)
          parameter.number("length",0.1,1,0.5)            
      end
      
      function makeBuffer()
          local data = ""
          datum="\\0\\xAD\\"
          numSamples = freq * length
          
          for i = 1,numSamples/#datum do
              data = data .. datum
          end
          
          return soundbuffer( data, FORMAT_MONO8, freq )
      end
      
      function touched(touch)
          if touch.state == ENDED and
             touch.tapCount == 1 then
             tap = true
          end
      end
      
      function draw()
          background(0)
          
          if tap then
              b = makeBuffer()
              sound(b)
              tap = false
          end            
      end
      
  group: Sounds
  id: soundbuffer
  name: soundbuffer( data, format, freq )
  parameters:
  - description: string, uncompressed audio data
    name: data
  - description: >
      `FORMAT_MONO8`, `FORMAT_MONO16`, `FORMAT_STEREO8` or `FORMAT_STEREO16` 
    name: format
  - description: integer, the frequency of the data
    name: freq
  related:
  - sound
  returns: A new soundbuffer object
  syntax: soundbuffer( data, format, freq )
#---------------------------------
      
#---------------------------------
# soundBufferSize
#---------------------------------     
- category: function
  description: Calling this function will set the maximum buffer size for sounds.
    Sounds are stored in a buffer so that they do not need to be recreated if reused.
    Sounds are removed from this buffer on a least recently used basis when the
    buffer is full and a new sound is added. For example, if the buffer is 2 megabytes
    (the default), and we add a sound that puts it over the limit, the sound we
    used the longest time ago is removed from the buffer and will have to be re-created
    if played again. Generating the sound data can take a considerable amount of
    time for longer sounds.Playing a sound at 0 volume counts as playing
    and can be used to keep a sound in the cache (and to pre-generate a sound in
    the setup function.) Calling this method with 0 for the size sets the
    buffer to no limit. This can cause Codea to crash if too many sounds are generated
    as it may run out of memory.Calling this with no parameters returns the
    max size and current size of the buffer.
  examples:
  - example: |
      -- setting the sound buffer maximum size
      soundBufferSize( 3 )
  - example: |
      -- reading the current maximum size and used size
      maxSize, usedSize = nsoundBufferSize()
  - example: |
      -- setting to no limit
      soundBufferSize(0)
  group: Sounds
  id: soundBufferSize
  name: soundBufferSize( size )
  parameters:
  - description: number, the maximum size of the buffer in megabytes. This can be
      a fraction. If this is 0, the buffer size is unlimited. An unlimited buffer
      size can cause Codea to crash if it runs out of memory, so take care if it
      is used.
    name: size
  related:
  - sound
  returns: >
    If no parameters are given, a pair of values: maxBufferSize, currentBufferSize
  syntax: |
    soundBufferSize( size )
    soundBufferSize()
#---------------------------------
      
#---------------------------------
# SOUND_JUMP
#---------------------------------           
- category: const
  description: This constant specifies a jump sound. Similar to a character jumping
    in a platform game.
  group: Sounds
  id: SOUND_JUMP
  name: SOUND_JUMP
  related:
  - sound
  returns: The string "jump"
  syntax: SOUND_JUMP
#---------------------------------
      
#---------------------------------
# SOUND_HIT
#---------------------------------               
- category: const
  description: This constant specifies a hit sound. For example, when the enemy
    collides with the player.
  group: Sounds
  id: SOUND_HIT
  name: SOUND_HIT
  related:
  - sound
  returns: The string "hit"
  syntax: SOUND_HIT
#---------------------------------
      
#---------------------------------
# SOUND_PICKUP
#---------------------------------     
- category: const
  description: This constant specifies a pickup sound. For example, collecting coins
    in a game.
  group: Sounds
  id: SOUND_PICKUP
  name: SOUND_PICKUP
  related:
  - sound
  returns: The string "pickup"
  syntax: SOUND_PICKUP
#---------------------------------
      
#---------------------------------
# SOUND_POWERUP
#---------------------------------     
- category: const
  description: This constant specifies a powerup sound. For example, collecting
    bonuses in a game.
  group: Sounds
  id: SOUND_POWERUP
  name: SOUND_POWERUP
  related:
  - sound
  returns: The string "powerup"
  syntax: SOUND_POWERUP
#---------------------------------
      
#---------------------------------
# SOUND_SHOOT
#---------------------------------     
- category: const
  description: This constant specifies a shooting sound. For example, firing a bullet
    in a game.
  group: Sounds
  id: SOUND_SHOOT
  name: SOUND_SHOOT
  related:
  - sound
  returns: The string "shoot"
  syntax: SOUND_SHOOT
#---------------------------------
      
#---------------------------------
# SOUND_EXPLODE
#---------------------------------     
- category: const
  description: This constant specifies an explosion sound. For example, a space
    ship blowing up.
  group: Sounds
  id: SOUND_EXPLODE
  name: SOUND_EXPLODE
  related:
  - sound
  returns: The string "explode"
  syntax: SOUND_EXPLODE
#---------------------------------
      
#---------------------------------
# SOUND_BLIT
#---------------------------------     
- category: const
  description: This constant specifies a generic "blit" sound.
  group: Sounds
  id: SOUND_BLIT
  name: SOUND_BLIT
  related:
  - sound
  returns: The string "blit"
  syntax: SOUND_BLIT
#---------------------------------
      
#---------------------------------
# SOUND_RANDOM
#---------------------------------     
- category: const
  description: This constant specifies a randomly generated sound. You can use this
    in conjunction with the seed value of the `sound()` function to find a
    sound that you like.
  group: Sounds
  id: SOUND_RANDOM
  name: SOUND_RANDOM
  related:
  - sound
  returns: The string "random"
  syntax: SOUND_RANDOM
#---------------------------------
      
#---------------------------------
# SOUND_NOISE
#---------------------------------     
- category: const
  description: This specifices to use a white noise function as the waveform for
    this sound
  group: Sounds
  id: SOUND_NOISE
  name: SOUND_NOISE
  related:
  - sound
  returns: The integer 3
  syntax: SOUND_NOISE
#---------------------------------
      
#---------------------------------
# SOUND_SAWTOOTH
#---------------------------------     
- category: const
  description: This specifices to use a sawtooth function as the waveform for this
    sound
  group: Sounds
  id: SOUND_SAWTOOTH
  name: SOUND_SAWTOOTH
  related:
  - sound
  returns: The integer 1
  syntax: SOUND_SAWTOOTH
#---------------------------------
      
#---------------------------------
# SOUND_SINEWAVE
#---------------------------------     
- category: const
  description: This specifices to use a sine wave function as the waveform for this
    sound
  group: Sounds
  id: SOUND_SINEWAVE
  name: SOUND_SINEWAVE
  related:
  - sound
  returns: The integer 2
  syntax: SOUND_SINEWAVE
#---------------------------------
      
#---------------------------------
# SOUND_SQUAREWAVE
#---------------------------------     
- category: const
  description: This specifices to use a square wave function as the waveform for
    this sound
  group: Sounds
  id: SOUND_SQUAREWAVE
  name: SOUND_SQUAREWAVE
  related:
  - sound
  returns: The integer 0
  syntax: SOUND_SQUAREWAVE
